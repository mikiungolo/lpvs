-- Questa applicazione modella un sistema Rfid, in particolare 
-- modella e verifica l'algoritmo base di anticollisione per i lettori.
-- il sistema è rappresentato da un lettore ed un numero N di tag disponibili
-- alla comunicazione con il lettore.  

-- Il lettore invia delle sonde a determinati tag nel suo raggio d'azione, 
-- i quali potranno rispondere solo tramite tale richiesta. 
-- Nel livello di astrazione scelto la sonda inviata dal Reader è rappresentata da 
-- una sequenza di bit che dinamicamente cambia fino al termine dell'algoritmo, 
-- ovvero quando tutti i tag saranno stati individuati. 
-- Un tag sarà individuato se e solo se sarà l'unico ad aver ricevuto la sonda da parte del lettore, 
-- ovvero quando il suo id è uguale a quello presente nella sonda.  

-- Nel sistema Rfid simulato i tag sono attivi, disponendo quindi di una propria alimentazione. 
-- Ogni tag ha una determinata energia casuale che una volta esaurita dopo svariate trasmissioni 
-- spegneranno automaticamente il tag rendendolo ininfluente all'interno del sistema.
-- Si osserva il caso estremo: quando un tag viene individuato con "l'ultimo livello di energia"
-- essa terminerà ma all'interno del sistema si è scelto comunque di ritenerlo identified e non spento 
-- per scelta logica. In ogni caso la seguente situazione non condiziona l'esecuzione del sistema. 

MODULE main 

VAR 
    reader: Reader(tag1, tag2, tag3, tag4, tag5, tag6, tag7, tag8);
    tag1:   Tag(reader, -1, -1, -1, 0, 0);
    tag2:   Tag(reader, -1, -1, 0, 1, 0); 
    tag3:   Tag(reader, -1, -1, 1, 1, 0);
    tag4:   Tag(reader, -1, -1, 0, 0, 1);
    tag5:   Tag(reader, -1, -1, 1, 0, 1);
    tag6:   Tag(reader, -1, 0, 1, 1, 1);
    tag7:   Tag(reader, 0, 1, 1, 1, 1);
    tag8:   Tag(reader, 1, 1, 1, 1, 1);

-- PROPERTY 

-- RAGGIUNGIBILITA'
    
-- dopo che un tag è entrato in trasmissione prima o poi o sarà identificato
-- oppure esaurirà la sua batteria

-- verifica su tutti i tag
CTLSPEC 
    EF((tag1.state = transmitting) -> (tag1.state = identified | tag1.state = shutdown))

CTLSPEC 
    EF((tag2.state = transmitting) -> (tag2.state = identified | tag2.state = shutdown))

CTLSPEC 
    EF((tag3.state = transmitting) -> (tag3.state = identified | tag3.state = shutdown))

-- CTLSPEC 
--     EF((tag4.state = transmitting) -> (tag4.state = identified | tag4.state = shutdown))
-- ....

-- RAGGIUNGIBILITA' COMPOSTA 
--Si verifica se si raggiunge uno stato in cui il reader si trova ad inviare una sonda 
-- e sucessivamente un tag (1 ad esempio) entra in trasmissione 
LTLSPEC
    F(reader.state = send & X tag1.state = transmitting)

-- LIVENESS 

-- se tutti i tag sono stati individuati o sono rimasti senza alimentazione lungo il cammino  
-- allora l'algoritmo termina e tale condizione non varierà in nessun modo. 
CTLSPEC 
    AG(((tag1.state = identified | tag1.state = shutdown) & (tag2.state = identified | tag2.state = shutdown) & 
        (tag3.state = identified | tag3.state = shutdown) & (tag4.state = identified | tag4.state = shutdown) & (tag5.state = identified | tag5.state = shutdown) &
        (tag6.state = identified | tag6.state = shutdown) & (tag7.state = identified | tag7.state = shutdown) & (tag8.state = identified | tag8.state = shutdown)
                            -> AF((reader.state = end))))

-- LIVENESS (condizionata al turno successivo X)

-- quando sono stati identificati tutti i tag il reader  non  
-- compie più operazioni, non cambiando più il suo stato 
CTLSPEC
    AG((reader.tag_count = 0) -> AX(reader.state = end))

-- se solo un tag riceve la sonda allora il reader sarà in accettazione 
-- nel prossimo turno a meno che esso non sia l'ultimo e allora termina
CTLSPEC 
    AG((tag1.present + tag2.present + tag3.present + tag4.present + tag5.present + tag6.present + tag7.present + tag8.present 
            = 1) -> AX(reader.state = single | reader.state = end))

-- in tutte le configurazioni possibili se un tag si trova in attesa allora 
-- nel futuro si avrà che il reader invierà sonde. 
CTLSPEC
    AG (tag1.state = wait -> AF reader.state = send)

-- FAIRNESS FORTE
-- qualora un tag dovesse spegnersi per aver terminato la sua batteria allora non 
-- non si troverà mai presente in un futuro nodo in cui il lettore va a ricercare i tag 
-- mancanti nel sistema; quindi non potrà più comunicare con il reader. 
-- Viene verificato attraverso la variabile presente perchè attraverso lo stato del tag 
-- (GF (!tag1.transmitting) ad esempio), tale proprietà risultava banale da verificare. 
LTLSPEC
    G F(tag1.state = shutdown) -> G F(tag1.present = 0)

-- FAIRNESS INCONDIZIONATA 
-- si verifica se effettivamente l'algoritmo è in grado di individuare tutti i tag nel proprio 
-- raggio d'azione. Una volta individuati l'algoritmo termina e manterrà tale stato per sempre. 
CTLSPEC
    AG AF(reader.tag_count = 0 & reader.state = end)

-- Nel seguente livello d'astrazione il Reader conosce il numero di tag presenti nel suo raggio d'azione.
-- Tale conoscenza verrà sfruttata per la verifica delle collisioni e per tenere il conto dei tag non identificati.  

-- RACCOLTA E VERIFICA DEI DATI PER LA DIMOSTRAZIONE DEL MIGLIORAMENTO DI CBT RISPETTO AL BASE

-- dimostro che nella versione base dell'algoritmo il massimo numero di collisioni è 8
-- come viene rappresentato dall'albero delle collisioni del documento, infatti: 
-- è raggiungibile uno stato in cui il numero di collisioni contate sono 8
-- OSSERVAZIONE: per dimostrare tutto ciò attraverso le prossime 3 proprietà è necessario che 
-- i tag partano con un livello di batteria che non potrà mai arrivare a 0. 
CTLSPEC
    EF reader.collision_count = 8

-- e se ne si hanno 8 è impossibile andare ad incontrare una nuova collision
CTLSPEC
    AG (reader.collision_count = 8 -> AG !(reader.state = collision))

-- Tutto questo è valido se e solo se il nostro sistema di tag attivi non influenza 
-- i cammini disattivandosi prima di poter compiere l'intero percorso rappresentato nell'albero
-- delle collisioni del documento, quindi verifichiamo che questo non interferisce: 

CTLSPEC
    AG !(reader.off_count > 0)


MODULE Reader(tag1, tag2, tag3, tag4, tag5, tag6, tag7, tag8) 

VAR 
    state     : {send, wait, idle, collision, single, end}; -- stato dele reader 
    tag_count : 0..8; -- contatore tag 
    address   : array 0..4 of -1..1; -- indirizzo dinamico che simula il contenuto di una sonda
    collision_count : 0..9;

DEFINE
    -- conta il numero di tag presenti in un nodo dell'albero
    node_count   := tag1.present + tag2.present + tag3.present + tag4.present + tag5.present + tag6.present + tag7.present + tag8.present;
    off_count    := tag1.off + tag2.off + tag3.off + tag4.off + tag5.off + tag6.off + tag7.off + tag8.off;
    no_collision := (state = single | state = idle);

ASSIGN

    init(state) := send;
    next(state) := 
    case
        tag_count = 0                 : end;  
        state = send                  : wait; 
        state = wait & node_count = 1 : single; 
        state = wait & node_count > 1 : collision;
        state = wait & node_count = 0 : idle;
        state = idle                  : send; 
        state = collision             : send;
        state = single                : send;
        TRUE                          : state; 
    esac;


    init(collision_count) := 0;
    next(collision_count) :=
    case
        collision_count < 9 & state = collision : collision_count + 1; 
        TRUE              : collision_count; 
    esac;

    init(tag_count) := 8;
    next(tag_count) := 
    case
        state = single & tag_count > 0         : tag_count - 1;
        tag_count > 0 & tag_count >= off_count : tag_count - off_count;   
        TRUE                                   : tag_count;
    esac;    

    -- Si distingue per ogni configurazione possibile dell'indirizzo l'evoluzione secondo l'algoritmo clipped e secondo la versione base.  
    -- L'indirizzo viene modellato costruendo il cammino dalla foglia alla radice: 
    -- secondo questo riferimento l'indirizzo 100 viene rappresentato all'interno dell'array come 100-1-1-1

    -- Quello che avviene viene così riassunto: 
    -- collisione: in questo caso l'indirizzo viene shiftato a destra per liberare la prima posizione al bit 0
    -- single o idle: 
    -- base --> si shifta l'indirizzo di n posizioni a sinistra per eliminare tutti i bit 1, e il primo bit 0 diventa 1
    -- clipped --> dalla versione base si aggiunge la logica della collisione così da attivare direttamente il nodo successivo

    init(address[0]) := -1;
    next(address[0]) := 
    case 
        state = collision                                                                                                     : 0;
        no_collision & address[0] != 0 & address[1] != 0 & address[2] != 0 & address[3] != 0 & address[4] != 0 : -1;
        no_collision & address[0] = 0                                                                      : 1; 
        TRUE                                                                                                                  : address[0]; 
    esac; 

    init(address[1]) := -1;
    next(address[1]) := 
    case 
        state = collision & address[0] != -1                                                                 : address[0];
        no_collision & address[0] = 1 & address[1] = 1 & address[2] = 1 & address[3] = 1 : -1;
        no_collision & address[0] = 1 & address[1] = 1 & address[2] = 1 & address[3] = 0                  : address[4]; 
        no_collision & address[0] = 1 & address[1] = 1 & address[2] = 0                                   : address[3]; 
        no_collision & address[0] = 1 & address[1] = 0                                                    : address[2]; 
        TRUE                                                                                                                  : address[1]; 
    esac; 

    init(address[2]) := -1;
    next(address[2]) := 
    case 
        state = collision & address[0] != -1                                                                 : address[1];
        no_collision & address[0] = 1 & address[1] = 1 & address[2] = 1                  : -1; 
        no_collision & address[0] = 1 & address[1] = 1 & address[2] = 0                                   : address[4]; 
        no_collision & address[0] = 1 & address[1] = 0                                                    : address[3]; 
        TRUE                                                                                                                  : address[2];
    esac; 

    init(address[3]) := -1;
    next(address[3]) := 
    case 
        state = collision & address[0] != -1                                                                 : address[2];
        no_collision & address[0] = 1 & address[1] = 1 & address[2] != 1                                   : -1; 
        no_collision & address[0] = 1 & address[1] = 0                                                    : address[4]; 
        TRUE                                                                                                                  : address[3]; 
    esac; 

    init(address[4]) := -1;
    next(address[4]) := 
    case 
        state = collision & address[0] != -1             : address[3];
        no_collision & address[0] = 1 : -1;
        TRUE                                 : address[4];
    esac;

-- Ogni tag riceve come parametri sia il lettore (a simulazione del fatto che ogni tag è in comunicazione con esso)
MODULE Tag(reader, b0, b1, b2, b3, b4)

VAR 
    state       : {wait, transmitting, check_single, identified, shutdown};
    present     : 0..1; -- impostato a 1 quando si presenta nel nodo corrente puntato dal lettore
    lev_battery : -1..10; 
    off         : 0..1; -- impostato a 1 quando è senza alimentazione

-- ogni tag confronta bit per bit l'indirizzo con l'indirizzo della sonda inviata senza considerare però i bit = -1. 
-- questa scelta sta a simulare un cammino simultaneo nell'albero delle collisioni come mostrato nel documento. 
DEFINE 
lev           :=     
                    case
                        reader.address[4] != -1 : 4;
                        reader.address[3] != -1 : 3;
                        reader.address[2] != -1 : 2;
                        reader.address[1] != -1 : 1;
                        reader.address[0] != -1 : 0;
                        TRUE                    : -1;
                    esac;

address_equal :=    ((lev >= 0 -> reader.address[lev] = b4) &
                    (lev > 0 -> reader.address[lev - 1] = b3) &
                    (lev > 1 -> reader.address[lev - 2] = b2) &
                    (lev > 2 -> reader.address[lev - 3] = b1) &
                    (lev > 3 -> reader.address[lev - 4] = b0)) | 
                    lev = -1;

ASSIGN

    init(state) := wait;
    next(state) := 
    case
        lev_battery > 0 & reader.state = send & state = wait & address_equal : transmitting;
        state = transmitting                                                : check_single;
        reader.state = single & state = check_single                        : identified;
        lev_battery > 0 & reader.state != single & state = check_single     : wait;
        lev_battery = 0 & state != identified                               : shutdown;
        TRUE                                                                : state; 
    esac;

    init(present) := 0;
    next(present) := 
    case
        reader.state = send & state = wait & address_equal : 1; 
        TRUE                                              : 0;
    esac;   

-- nel momento in cui la batteria di un tag termina esso diventa inattivo all'interno di un sistema  
-- se la batteria si esaurisce nel momento in cui esso è in solitaria in un nodo il tag viene comunque individuato 
-- se la batteria si esaurisce dopo aver trasmesso in contemporanea ad un altro tag, quest'ultimo non verrà considerato single
    init(lev_battery) := 10; 
    next(lev_battery) := 
    case 
        lev_battery > 0 & state = transmitting : lev_battery -1; 
        lev_battery = 0 & state != shutdown    : -1;
        lev_battery = -1                       : 0;
        TRUE                                   : lev_battery; 
    esac; 

    init(off) := 0; 
    next(off) := 
    case
        off = 1 | lev_battery = 0 : 0;
        lev_battery = -1 & state != identified : 1; 
        TRUE                                   : 0;
    esac; 

-- Di seguito vengono mostrate le transizioni degli stati in una possibile esecuzione da parte del tool.
-- Si va a negare lo stato finale del reader "end" che indica la fine deel'algoritmo. 

-- NuSMV > check_ctlspec -p "AG !(reader.state = end)" 
-- -- specification AG !(reader.state = end)  is false
-- -- as demonstrated by the following execution sequence
-- Trace Description: CTL Counterexample 
-- Trace Type: Counterexample 
--   -> State: 1.1 <-
--     reader.state = send
--     reader.tag_count = 8
--     reader.address[0] = -1
--     reader.address[1] = -1
--     reader.address[2] = -1
--     reader.address[3] = -1
--     reader.address[4] = -1
--     tag1.state = wait
--     tag1.present = 0
--     tag1.lev_battery = 2
--     tag1.off = 0
--     tag2.state = wait
--     tag2.present = 0
--     tag2.lev_battery = 2
--     tag2.off = 0
--     tag3.state = wait
--     tag3.present = 0
--     tag3.lev_battery = 2
--     tag3.off = 0
--     tag4.state = wait
--     tag4.present = 0
--     tag4.lev_battery = 2
--     tag4.off = 0
--     tag5.state = wait
--     tag5.present = 0
--     tag5.lev_battery = 2
--     tag5.off = 0
--     tag6.state = wait
--     tag6.present = 0
--     tag6.lev_battery = 2
--     tag6.off = 0
--     tag7.state = wait
--     tag7.present = 0
--     tag7.lev_battery = 2
--     tag7.off = 0
--     tag8.state = wait
--     tag8.present = 0
--     tag8.lev_battery = 2
--     tag8.off = 0
--     reader.no_collision = FALSE
--     reader.off_count = 0
--     reader.node_count = 0
--     tag1.lev = -1
--     tag2.lev = -1
--     tag3.lev = -1
--     tag4.lev = -1
--     tag5.lev = -1
--     tag6.lev = -1
--     tag7.lev = -1
--     tag8.lev = -1
--   -> State: 1.2 <-
--     reader.state = wait
--     tag1.state = transmitting
--     tag1.present = 1
--     tag2.state = transmitting
--     tag2.present = 1
--     tag3.state = transmitting
--     tag3.present = 1
--     tag4.state = transmitting
--     tag4.present = 1
--     tag5.state = transmitting
--     tag5.present = 1
--     tag6.state = transmitting
--     tag6.present = 1
--     tag7.state = transmitting
--     tag7.present = 1
--     tag8.state = transmitting
--     tag8.present = 1
--     reader.node_count = 8
--   -> State: 1.3 <-
--     reader.state = collision
--     tag1.state = check_single
--     tag1.present = 0
--     tag1.lev_battery = 1
--     tag2.state = check_single
--     tag2.present = 0
--     tag2.lev_battery = 1
--     tag3.state = check_single
--     tag3.present = 0
--     tag3.lev_battery = 1
--     tag4.state = check_single
--     tag4.present = 0
--     tag4.lev_battery = 1
--     tag5.state = check_single
--     tag5.present = 0
--     tag5.lev_battery = 1
--     tag6.state = check_single
--     tag6.present = 0
--     tag6.lev_battery = 1
--     tag7.state = check_single
--     tag7.present = 0
--     tag7.lev_battery = 1
--     tag8.state = check_single
--     tag8.present = 0
--     tag8.lev_battery = 1
--     reader.node_count = 0
--   -> State: 1.4 <-
--     reader.state = send
--     reader.address[0] = 0
--     tag1.state = wait
--     tag2.state = wait
--     tag3.state = wait
--     tag4.state = wait
--     tag5.state = wait
--     tag6.state = wait
--     tag7.state = wait
--     tag8.state = wait
--     tag1.lev = 0
--     tag2.lev = 0
--     tag3.lev = 0
--     tag4.lev = 0
--     tag5.lev = 0
--     tag6.lev = 0
--     tag7.lev = 0
--     tag8.lev = 0
--   -> State: 1.5 <-
--     reader.state = wait
--     tag1.state = transmitting
--     tag1.present = 1
--     tag2.state = transmitting
--     tag2.present = 1
--     tag3.state = transmitting
--     tag3.present = 1
--     reader.node_count = 3
--   -> State: 1.6 <-
--     reader.state = collision
--     tag1.state = check_single
--     tag1.present = 0
--     tag1.lev_battery = 0
--     tag2.state = check_single
--     tag2.present = 0
--     tag2.lev_battery = 0
--     tag3.state = check_single
--     tag3.present = 0
--     tag3.lev_battery = 0
--     reader.node_count = 0
--   -> State: 1.7 <-
--     reader.state = send
--     reader.address[1] = 0
--     tag1.state = shutdown
--     tag1.lev_battery = -1
--     tag2.state = shutdown
--     tag2.lev_battery = -1
--     tag3.state = shutdown
--     tag3.lev_battery = -1
--     tag1.lev = 1
--     tag2.lev = 1
--     tag3.lev = 1
--     tag4.lev = 1
--     tag5.lev = 1
--     tag6.lev = 1
--     tag7.lev = 1
--     tag8.lev = 1
--   -> State: 1.8 <-
--     reader.state = wait
--     tag1.lev_battery = 0
--     tag1.off = 1
--     tag2.lev_battery = 0
--     tag2.off = 1
--     tag3.lev_battery = 0
--     tag3.off = 1
--     reader.off_count = 3
--   -> State: 1.9 <-
--     reader.state = idle
--     reader.tag_count = 5
--     tag1.off = 0
--     tag2.off = 0
--     tag3.off = 0
--     reader.no_collision = TRUE
--     reader.off_count = 0
--   -> State: 1.10 <-
--     reader.state = send
--     reader.address[0] = 1
--     reader.no_collision = FALSE
--   -> State: 1.11 <-
--     reader.state = wait
--   -> State: 1.12 <-
--     reader.state = idle
--     reader.no_collision = TRUE
--   -> State: 1.13 <-
--     reader.state = send
--     reader.address[1] = -1
--     reader.no_collision = FALSE
--     tag1.lev = 0
--     tag2.lev = 0
--     tag3.lev = 0
--     tag4.lev = 0
--     tag5.lev = 0
--     tag6.lev = 0
--     tag7.lev = 0
--     tag8.lev = 0
--   -> State: 1.14 <-
--     reader.state = wait
--     tag4.state = transmitting
--     tag4.present = 1
--     tag5.state = transmitting
--     tag5.present = 1
--     tag6.state = transmitting
--     tag6.present = 1
--     tag7.state = transmitting
--     tag7.present = 1
--     tag8.state = transmitting
--     tag8.present = 1
--     reader.node_count = 5
--   -> State: 1.15 <-
--     reader.state = collision
--     tag4.state = check_single
--     tag4.present = 0
--     tag4.lev_battery = 0
--     tag5.state = check_single
--     tag5.present = 0
--     tag5.lev_battery = 0
--     tag6.state = check_single
--     tag6.present = 0
--     tag6.lev_battery = 0
--     tag7.state = check_single
--     tag7.present = 0
--     tag7.lev_battery = 0
--     tag8.state = check_single
--     tag8.present = 0
--     tag8.lev_battery = 0
--     reader.node_count = 0
--   -> State: 1.16 <-
--     reader.state = send
--     reader.address[0] = 0
--     reader.address[1] = 1
--     tag4.state = shutdown
--     tag4.lev_battery = -1
--     tag5.state = shutdown
--     tag5.lev_battery = -1
--     tag6.state = shutdown
--     tag6.lev_battery = -1
--     tag7.state = shutdown
--     tag7.lev_battery = -1
--     tag8.state = shutdown
--     tag8.lev_battery = -1
--     tag1.lev = 1
--     tag2.lev = 1
--     tag3.lev = 1
--     tag4.lev = 1
--     tag5.lev = 1
--     tag6.lev = 1
--     tag7.lev = 1
--     tag8.lev = 1
--   -> State: 1.17 <-
--     reader.state = wait
--     tag4.lev_battery = 0
--     tag4.off = 1
--     tag5.lev_battery = 0
--     tag5.off = 1
--     tag6.lev_battery = 0
--     tag6.off = 1
--     tag7.lev_battery = 0
--     tag7.off = 1
--     tag8.lev_battery = 0
--     tag8.off = 1
--     reader.off_count = 5
--   -> State: 1.18 <-
--     reader.state = idle
--     reader.tag_count = 0
--     tag4.off = 0
--     tag5.off = 0
--     tag6.off = 0
--     tag7.off = 0
--     tag8.off = 0
--     reader.no_collision = TRUE
--     reader.off_count = 0
--   -> State: 1.19 <-
--     reader.state = end
--     reader.address[0] = 1
--     reader.no_collision = FALSE